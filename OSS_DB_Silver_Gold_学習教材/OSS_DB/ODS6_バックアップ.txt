’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'テーブルとファイル間でデータをコピーする方法
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
【クライアント側のファイルにアクセスする】
1.psqlのメタコマンド\copyコマンドを使用する
    書式：\copy テーブル名 from{ファイル名 | stdin} [with] [オプション]
    例：\copy t1 from sample.txt(コピー元のファイル) with delimiter '|'
        sample.txtファイルの内容を|で区切って各行のカラムごとに分割し、「t1」テーブルにコピーする

    書式：\copy テーブル名 to {ファイル名 | stdout} [with] [オプション]
    例：\copy sample to sample.csv csv
        sampleテーブルの内容を、クライアント側にcsv形式でsample.csvファイルとして出力する

    例：\copy sample to sample.txt delimiter as ','
    例：\copy sample to sample.txt delimiter ','
        sampleテーブルの内容を各行のカラムごとにカンマで区切り、
        クライアント側にsample.txtファイルとして出力する。
            テーブルのデータを各行のカラムごとに区切る場合は、
                delimiter[as]オプションを使用する。

    例：\copy sample from sample.csv csv header
        csv形式であるsample.csvファイルの内容をsampleテーブルに挿入する
            +テーブルの先頭行情報も出力する

    こっちは実行に特別な権限を必要としない。

【サーバ側のファイルにアクセスする】
2.SQLのCOPYコマンドを使用する
    サーバ側のファイルとテーブル間のデータをコピーするSQLコマンドのこと。
    テーブルとサーバのファイル間で双方向にデータをコピーすることができる。

    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    '例：スーパユーザ権限がなくても実行可能(ファイル名指定しない場合)
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    【テーブルのデータをファイルに出力する場合】
        COPY テーブル名 TO {'絶対パスでファイル名' | STDOUT} [WITH] [オプション] ;

    【ファイルのデータをテーブルに挿入する場合】
        COPY テーブル名 FROM{'絶対パスのファイル名' | STDIN} [WITH] [オプション];

    例：
        COPY テーブル名 TO{'絶対パスのファイル名' | STDOUT}　[WITH] [オプション];
            STDOUTを指定した場合は、テーブルのデータを標準出力(クライアントの画面)に出力する。
            ファイルフォーマットを指定しない場合はテキスト形式になる
            同じく、区切り文字はタブになる

    ↑主なパラメータ
    STDOUT:
        テーブルのデータを標準出力(クライアントの画面)にコピーする
    STDIN:
        標準入力(キーボードからの入力)をテーブルにコピーする

    データをcsvで出力する場合
        COPY sample TO '/Users/local/sample.csv' WITH(FORMAT csv);

    ヘッダー行をなんとかしたい場合(ファイルの先頭行情報を出力する場合)
        COPY sample FROM '/Users/local/sample.csv' WITH(FORMAT　csv, HEADER);
            COPYコマンドで複数オプションを指定する場合はオプションを()でくくる。

    ※\copyコマンドでアクセスできるのはクライアント側のファイル
    ※テーブルとファイル間で両方向のコピーが可能
    ※標準出力へのデータ出力、または標準入力からのデータ入力が可能
    ※区切り文字はdelimiterオプションを指定することでデフォルトのタブやカンマ形式から変更可能
    ※COPYコマンドで操作できるのは、サーバ側のファイル。

’ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
'pg_restore [接続オプション] [オプション] [ファイル名]
’ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
論理バックアップのリストアに使用するコマンド。
テキスト形式以外(カスタム形式やtar形式)でバックアップされたファイルが対象。

リストア対象：
    1.テーブルデータ
    2.ラージオブジェクト
    3.シーケンス値

リストア先に指定するデータベース：
    リストア時に作成されている必要(存在の必要)があるので注意が必要。

※ロール情報をバックアップしたかったら
    pg_dumpallコマンドを使用する必要がある。
        ただし、pg_dumpallコマンドはテキスト形式のバックアップファイルしか取得できない。
        リストアにpg_restoreコマンドは使用できない。

例：
    pg_restore -U postgres -d test file.dump
    ユーザ「postgres」で接続
    データベース「test」に対してバックアップファイルfile.dumpをリストアする

【接続オプション】
pg_dumpコマンドと同様。

【オプション】
-d データベース名(--dbname=データベース名)
    リストアを行う先のデータベース名を指定する
    省略すると標準出力にテキスト形式のSQL文が出力される

-c clean
    リストア前に既存のデータベースオブジェクトを削除する

-j ジョブ数(--jobs=ジョブ数)
    リストア処理を同時に実行するジョブ数を指定する

-1(--single-transaction)
    リストア処理を1つのトランザクションとして実行する
    ’------------------------------------------
    'テキスト形式のファイルをバックアップをリストアする場合
    'psql [接続オプション] [オプション] [データベース名]
    ’------------------------------------------
    psql -f db001.bak newdb


’ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
'pg_dumpコマンド [接続オプション] [オプション] [データベース名]
'実行：全ユーザで可能
’ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
データベースクラスタのデータをデータベース単位でバックアップする
    データベースクラスタクラスタ全体に対するロールやテーブルスペース定義は取得できない。
        →pg_dumpallコマンドであれば可能

テーブルやスキーマを指定してバックアップすることも可能。
論理バックアップはPostgreSQLサーバを稼働させたまま行う。
    バックアップの実行が他ユーザのデータベースアクセスを妨げることはない。
バックアップファイルの形式はテキスト、カスタム、tar形式の3つ。
    テキスト形式：psqlコマンドかな？
    それ以外の形式：pg_restoreコマンド

例：
pg_dump -Fp -f file.dump test
    testデータベースのバックアップをテキスト形式で'file.dump'に出力する

pg_dump -F p x > y
    データベースxをテキスト形式でファイルyにバックアップする

pg_dump -U postgres test
    postgresユーザでデータベースに接続し、testデータベースのバックアップを取得している。
    オプションの設定がない
        バックアップファイル形式はテキスト
        出力先は標準出力(クライアントの画面)になる。

【オプション】
-F フォーマット(--format=フォーマット)
    出力フォーマットの形式を指定する(省略するとテキスト形式に指定される)

p | plain／    出力フォーマットにテキスト形式を指定する(デフォルト)
c | custom　／    出力フォーマットにカスタム形式(バイナリ形式)を指定する
t | tar　／    出力フォーマットにtar形式を指定する

-f ファイル名(--file=ファイル名)
    バックアップの出力先ファイル名を指定する
    省略すると標準出力(クライアントの画面)に出力される
    ×エラー？pg_dump file.dump test
        使うなら-fか>を使う必要がある

    ※エラーメッセージを出力する機能はない。
    ※データベース名を指定したバックアップも可能。
    ※ラージオブジェクトをバックアップすることもできる。
        バックアップを指定のテーブルやテーブル定義に限定しない場合、
        ラージオブジェクトのバックアップはデフォルトで取得される。
    ※データベースクラスタでなく、データベース単位でバックアップする。

’ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
'pg_dumpallコマンド [接続オプション] [オプション]
'こっちはテキスト形式でしかダウンロードできない
’ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
論理バックアップを取るときに使うコマンド
データベースクラスタの全データがバックアップ対象となる
    Postgre.confなどの設定ファイルは対象外となる。
オプションを指定することで、グローバルオブジェクトのみをバックアップすることも可能。
PostgreSQLサーバを稼働させたまま論理バックアップをすることも可能。

例：pg_dumpall -U postgres -f file.dump
    Postgreユーザで'file.dump'というテキスト形式のファイルをバックアップする

例：pg_dumpall -f bk001.dump
    ↑データベースクラスタの全データをbk001.dumpファイルへ出力してバックアップしている。
    ※pg_dumpallで出力されるバックアップファイルはテキスト形式。

    ※ロールやテーブルスペース(データベースオブジェクトを格納する領域)定義などの情報も、
    　バックアップ対象に含まれる。

    ※設定ファイルはバックアップ対象外。
    ※pg_dumpallコマンドによるバックアップは、psqlコマンドを使用してリストアする。

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'メジャーバージョンアップ時のバックアップ・リストア
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
メジャーバージョンアップ時は、ファイル構成が変わる可能性がある。

    旧バージョンのPostgreSQL
    ↓
    新バージョンのPostgreSQLへデータを移行する場合
        論理バックアップを使用する必要がある。
        物理だと整合性が失われることがあるため、最適とはいえない

    ※pg_dumpコマンドで取得したバックアップを使用できる
    ※バックアップは古いバージョン、リストアは新しいバージョンのPostgreSQLに対して行う
    ※pg_basebackupコマンドで取得したバックアップは整合性が失われる可能性がある
    ※ファイル構成に変更がある場合でも、旧バージョンのデータを移すことはできる

    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    '論理バックアップ
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    テーブル構造とデータ構造を意識する
        SQLファイルやバイナリファイルで表定義やデータを出力するバックアップ方式
            ファイル構成などが変更された場合も、整合性を保ったままデータを移行することができる
            バージョンアップ時のバックアップ・リストアは、旧バージョンでバックアップを取得
            新バージョンにリストアする
                ※pg_dump,pg_dumpallコマンドを使用してバックアップする
                    こちらは論理バックアップになるからメジャーバージョンが異なってもリストア可能。

    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    '物理バックアップ(PostgreSQLを停止させる必要がある)
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    データベース情報を保存したデータファイルを直接使用するバックアップ方法
    メジャーバージョンアップ時は、ファイル構成の変更などにより、整合性が失われることがある。
        ※オフラインでtarやrsyncコマンドによるディレクトリコピーを行う方法
        ※オンラインでpg_basebackupコマンドを使用する方法
            ↑両方とも、データベース情報を保存したデータファイルを直接使用するバックアップ方法
            PostgreSQLのメジャーバージョンが違う場合はリストアできない。
        ※こっちは、Postgresql.confなどの設定ファイルもバックアップ対象に含まれる
        ※データベースクラスタのディレクトリ以外にテーブルスペースなどのデータが有る
            こいつらもバックアップに含める必要がある。
        ※データはカスタム形式(バイナリ形式)ではなく、コピーしたディレクトリファイルの形で取得。
        ※バックアップデータは論理バックアップに比べて、サイズが大きくなる
            ◇論理バックアップはデータのみ
            ◇物理バックアップはpostgresql.confなどの設定ファイルも全てバックアップに含まれるから

    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    'バックアップ関連の表
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    オフラインバックアップ                    
        (PostgreSQLを停止させて行う)
            方式：物理バックアップ
                【オフライン】
                ・tar,rsyncコマンドを用いたディレクトリコピー
                    <復旧方法>
                        ・コピーしたディレクトリの配置

                【オンライン】
                ・各種パラメータの設定
                ・pg_start_backup(),pg_stop_backup()とtar,rsyncコマンドなど
                ・またはpg_basebackupコマンドを用いたベースバックアップの取得
                    <復旧方法：PITR(point in time recovery)>
                        ・コピーしたディレクトリの配置
                        ・アーカイブとして保存されていない、データベースへの変更を記録したログ
                        (WAL：Write Ahead Logging)のコピー
                        ・recovery.confファイルの設定

    オンラインバックアップ
        (PostgreSQLを稼働させたまま行う)
            方式：物理と論理

                【物理：オンライン(↑のオンラインと全く同じ】
                ・各種パラメータの設定
                ・pg_start_backup(),pg_stop_backup()とtar,rsyncコマンドなど
                ・またはpg_basebackupコマンドを用いたベースバックアップの取得
                    <復旧方法：PITR(point in time recovery)>
                        ・コピーしたディレクトリの配置
                        ・アーカイブとして保存されていない、データベースへの変更を記録したログ
                        (WAL：Write Ahead Logging)のコピー
                        ・recovery.confファイルの設定
                【論理】
                ・pg_dumpまたはpg_dumpallコマンドの実行
                    <復旧方法>
                        pg_dumpまたはpg_dumpallコマンドの実行
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'PITR(Point In Time Recovery)
’PostgreSQLサーバは稼働させたままでOK
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
1.ベースバックアップ(データベースクラスタ全体のバックアップで、テーブルごとじゃない)
    ※pg_start_backup(),pg_stop_backup()関数を使用する
    ※pg_basebackupコマンドを使用する
2.PostgreSQLの運用中にでたWAL(Write Ahead Logging)
    Write Ahead Logging=データベースへの変更を記録したログ
        WALファイルは溜まると古いものから順番に削除されていく。
            よって、アーカイブしていく必要がある(WALアーカイブ)。
                アーカイブが多量になると復旧に時間がかかる
                    ベースバックアップは定期的に取得することが望ましい。

上記1,2を使用してデータベースを復旧する方法のこと。
    データベースバックアップを取得した以降であれば、
    障害発生の直前に近い任意のポイントに復旧できるのが特徴。

    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    ’pg_basebackupコマンド(実行にはスーパユーザ権限orREPLICATION権限が必要)
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    ・バージョン9.1で追加
    ・ベースバックアップ(データベースクラスタ全体のバックアップ)を取得するコマンド。
        ∴テーブルスペースや設定ファイルもバックアップの対象になる

    ・デフォルト設定は、WALファイルを含めたバックアップを取得する
        ※pg_start_backup(),pg_stop_backup()は、
            バックアップの開始と終了を通知する関数だが、
            pg_basebackupコマンドを用いたバックアップでは呼び出し不要。
        ※リモートでバックアップを取得することも可能。

    ・WALファイルのバックアップ方法は、(デフォルト)-X s(stream)に指定されている。
        WALファイルをバックアップ対象に含める
        バックアップと並行してWALファイルをアーカイブする(ストリーミング)

    ・-Pオプションを指定すると、バックアップ中にバックアップ処理の実行状態を表示する。
    ・-Dオプションで指定するディレクトリが空ではない場合、コマンドの実行はエラーになる。
    ・ストリーミングレプリケーション
        データベースクラスタ全体を対象にデータを複製する機能
            において、プライマリのベースバックアップを取得する際に使用される。
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    'pg_start_backup()
    'pg_stop_backup()
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    PostgreSQLにバックアップの開始、終了を通知する関数のこと。
    PITRに於いてベースバックアップの取得を行う際に使用される。
        ・pg_start_backup()
            チェックポイントの実行も行う。
                チェックポイント／データの変更をディスクに反映する処理。

    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    'チェックポイントのお話
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    PostgreSQLでは、
        ・データの変更時にディスク上のデータを更新しない
        ・共有メモリ上の共有バッファに読み込んだデータを更新する。
        ・共有バッファの内容を纏めてディスク上のデータファイルへ書き込む
            ※チェックポイントという処理のこと
        ∴更新時のパフォーマンスを向上させている

    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    '通知関数を使用したバックアップの取得は、以下の手順
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    1.SELECT文でpg_start_backup()関数を呼び出す
        例：SELECT pg_start_backup('ラベル名');
    2.データベースクラスタ全体の物理バックアップを取得する
    3.SELECT文でpg_stop_buckup()関数を呼び出す
        例：SELECT pg_stop_backup();

        ※PostgreSQLが稼働したままでも取得可能
            バックアップ中にデータ更新された場合
                バックアップ時にはバックアップ中に作成されたWALも自動でアーカイブされる
                リカバリ時にWALアーカイブから更新内容が反映される。
            ベースバックアップはpg_basebackupコマンドを用いて取得可能。

    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    'PITR(Point In Time Recovery)
        に関連する主なパラメータ
        (postgresql.confファイルのパラメータ)
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    wal_level デフォルト／replica
        WALにどの程度の情報を書き込むかを指定する
        PITRを使用する前準備として、replicaまたはlogicalに指定する
    
    archive_mode デフォルト／off
        WALファイルをWALアーカイブとして保存するかどうかを指定する
        PITRを使用する前準備として、onまたはalwaysに指定する

    archive_command デフォルト／空文字
        WALファイルをコピーし、WALアーカイブとして保存するためのシェルコマンドを指定する
        PITRを使用する前準備として、以下のようなコマンドを指定する
        【例】’cp %p [WALアーカイブの保存先のパス]/%f’

    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    'PITR(Point In Time Recovery)：物理バックアップ
        の設定手順
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    1.事前設定
        postgresql.confファイルで、ログファイルをアーカイブして保存する設定を行う。
        リカバリ時にはrecovery.confファイルを作成して配置する。
    2.ベースバックアップ
        物理バックアップ
            OSコマンドのtarやrsyncコマンド
            pg_basebackupコマンド
                を使用する。
    3.リカバリ
        復旧されるポイント(リカバリポイント)は、recovery.confで設定できる。
        ■recovery.confファイルは基本的にユーザが手動で作成する

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'各種コマンド
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
psql -f db002.bak < db002
    テキスト形式のバックアップファイルをリストアするコマンド。

pg_dumpall -f db002.bak
pg_dump db002.bak -d db002
    両方ともバックアップを取得するコマンド

pg_ctl restore -f db002.bak -d db002
    存在しないコマンド