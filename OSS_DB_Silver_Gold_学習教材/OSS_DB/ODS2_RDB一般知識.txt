’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'PostgreSQLの仕組み
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
https://lets.postgresql.jp/node/165
クラサバ型のアーキテクチャを採用。
TCP/IPによる、サーバ接続が可能
    クライアント：フロントエンド
    サーバ：バックエンド
        通信プロトコルは、PostgreSQLのドキュメントに書いてある

複数台のコンピュータを、サーバとクライアントに役割を分けて運用する仕組みのこと。
データベースなどのリソースをサーバが集中管理し、クライアントがそれを利用する。

サーバへの接続は、TCP/IPまたはUNIXドメインによる通信が可能。
UNIXドメインとは、同じホスト内のプロセス間で通信する方式のこと。

        めちゃめちゃ細かく書いてある、このURL

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
’DBの基礎知識
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
リレーショナル・モデル
    1970年にエドガー.E.F.コッドによって提案されたモデル。
        リレーショナル・データベースの基になった。
    集合論に基づいている各リレーションの関連付けによってデータ構造を表現する。

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
’リレーショナルデータベース型の利点
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
1.表構造で作成するため、シンプルでわかりやすい
        カラムとレコードからなるテーブルで表現している。
        テーブルがリレーションと呼ばれて、複数のリレーションを関連付けて、データ構造を表現している。
        各リレーションは独立しているため、、、
            操作性が高い
            柔軟性に優れている。

2.操作対象のデータとデータの操作を分けているため、データへの依存がない
3.分離性が高く、データ構造に修正が入ってもプログラムへの影響が最小限に抑えられる。
4.数学の集合論をベースにしている
5.データベース言語であるSQLを用いてデータを操作することができる
6.1970年、エドガー.F.コッドによって提案された

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
’リレーショナルデータベースを使うメリット
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
□アプリケーションは、DBMSを介すことで、DBの物理的な構造や検索方法を意識せずに、
　データにアクセスできる
□大量のデータが存在しても、それを管理・保守する負荷が減る
□アプリケーションはSQL言語を使用し、DBMSに問い合わせ要求できる

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
’関数従属
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
ある属性(列)の値Xが決まると、別の属性の値Yが自動的に決まること。
「X → Y」と表し、YはXに関数従属するという。


<部分関数従属性>
□YがXの一部に関数従属することであり、XがABからなるとすると、
　「{A,B} → Y」且つ「A → Y」または「B → Y」と表す。
　Yは、「A → Y」の場合はAに、
　Yは、「B → Y」の場合はBに、部分関数従属するということ。

<推移関数従属性>
□Xが決まるとYが決まり、Yが決まるとZが決まるという関係。
　X　→　Y、Y　→　Z、ただしY　→　Xは不成立の場合、「X　→　Z」と表記し、
ZはXに推移関数従属するということである。

<完全関数従属性>
□XがABからなる場合、AとBが決まるとYが決まる→「{A,B} → Y」
    →YがAとBに完全関数従属するという

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
’データベース設計
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
・概念データモデルを作成し、論理データモデルに変換する作業のこと
・概念データモデルとは、現実世界を概念的に表現したモデルのこと

現実世界に存在するものを抽象化して、データモデルを作成している作業のこと。
概念データモデルから論理データモデルの順に作成していく。

・概念データモデル：現実世界を概念的に表現したモデル
    ERモデル(実体参照モデル)を使用する。
    Entity-Relationshipモデル
    Entity間のカーディナリティ(多重度)を定義する。
        Entityにある1件のデータが対応するEntityの、何件のデータに対応している関係かどうかで決まる。

・論理データモデル
    データを論理的に表現したもの。
    概念データモデルを特定のデータベース管理システム(DBMS)に対応した論理データモデルに変換する。

    PostgreSQLでは、論理データモデルの構築でリレーショナルモデルを作成。
    リレーショナルモデル→リレーショナル・データベース(RDB)の基となるデータベースモデル
    リレーション→レコードとカラムからなるテーブルでデータを表現する。

・物理モデル
    データベースの性能について考慮していく。
        論理設計で正規化したテーブルの定義を崩す
        インデックスを定義する
            性能が向上するようにモデルを修正していく。

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
’各種データモデル
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
階層型データモデル
    Entityを階層型に管理する。
    ツリー構造で表現され、ある1つのEntityが他の複数のEntityと親子関係を持つ。

ネットワーク型データモデル
    各データが多対多に結びつくことでデータ構造を表現する
    網の目状の構造で表現され、1つの子Entityに対して、複数の親Entityを関連付けることができる

リレーショナルモデル
    分離性が高く、データ構造に修正が入ってもプログラムへの影響が最小限に抑えられる。

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
’各種データベース
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
カード型データベース
    あるレコードを、必要なだけ単純に累積する構造を持つデータベース。

階層型データベース
    古いデータベースモデル。データを木構造のように構築したデータベース。

ネットワーク型データベース
    古いデータベースモデルで、各レコード間の関係付が網目状になっている。

XMLデータベース
    XMLとは、HMTLと同じく、マークアップ言語の一つ。
        構造化された文書や構造化されたデータの共有を容易にする言語のこと。

リレーショナルモデルのカーディナリティは、多対多である。
    1対多、または、多対1である。

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
’正しい正規化
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
正規化は、テーブル間のレコードの関係が、
    ・1対1：テーブルを分割した意味がない。
    ・多対多：テーブルをもう一つ追加して、2つの「多対1」の関係に分割できる。

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
’正規化の手順
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
・第一正規化
    非正規形から繰り返し現れるデータを別表に切り離す
    導出項目(他の属性から算出できる項目)を削除する。
・第二正規化
    第一正規形に対して、複合主キーの一部に関数従属しているものを取り除く。
・第三正規化
    第二正規形に対して推移関数従属を除く。
    推移関数従属性は、「Xが決まるとYが決まり、Yが決まるとZが決まる」という関係。
    X　→　Y　→　Zと表現できる。

・第四正規化
・第五正規化
    四も五も、ほとんどやらない。
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
’正規化の効果
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
□データの変更時に生じるデータ不整合を防ぐ
□データの重複を排除してデータを一元管理する
□データのメンテナンスを効率化する

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'データベース設計の掟
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
1.リレーショナル・データベースを使うべし
2.フィールドの属性を慎重に決定すべし
3.テーブルを正規化すべし
4.テーブル間を多対1の関係にすべし
5.参照整合性を適切に設定すべし
6.インデックスを無駄に多用するべからず

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'データベース管理システムの機能
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
1.データ管理
    データ形式の管理と、追加、削除、更新、検索の操作
2.整合性の維持
    不正なデータや重複データをチェック、整合性を保つ
3.トランザクション管理
    トランザクション実行中の一連の処理を途中で停止しないように、
    データベースの操作の一貫性を保証する
4.同時実行制御
    複数のユーザが同時に実行しても矛盾が生じないようにする
    データベース上の不整合の発生を防ぐ
5.セキュリティ機能
    データのアクセス権限を管理し、不正アクセスから保護する
    暗号化することにより、高い安全性を実現する
6.障害回復機能
    障害発生時に復旧を行い障害発生前の状態に回復する。
    バックアップやリカバリ機能によりデータベースを復元する

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'データベース障害の種類
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
・トランザクション(分割できないまとまった単位)障害
    停電などでトランザクションが異常終了すること
・システム障害
・記憶媒体の障害

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'SQLの種類
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
<DCL(データ制御言語)>
GRANT：     権限操作    データに対するアクセス権限の付与 
REVOKE：    権限操作    アクセス権限の取消
BEGIN：     トランザクション    トランザクションの開始
COMMIT：    トランザクション    トランザクションの確定
ROLLBACK：  トランザクション    トランザクションの取消

<DDL(データ定義言語)>
CREATE：    作成    テーブルやインデックスを作成する
DROP：      削除    テーブルやインデックスを削除する
ALTER：     変更    テーブルやインデックスの定義を変更する
TRUNCATE：  削除    テーブルから全てのレコードを削除する

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'主キー
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
□主キーにNULL値は認められない
□主キーはテーブル内に一つだけである
    主キーに設定された列には自動的に一意性制約とNOTNULL制約がかかる。
    ∴重複値やNULL値を設定することが出来ない。

