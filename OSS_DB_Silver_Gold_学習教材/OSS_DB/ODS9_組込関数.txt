count()
    カラムを指定した場合、
    指定したカラムの値がNULL以外のデータ件数を取得する関数

'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'算術関数
'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
abs(数値)
    指定した数値の絶対値を返す
div(数値1,数値2)
    指定した数値1を数値2で割った商を返す
mod(数値1, 数値2)
    指定した数値1を数値2で割った余りを返す
floor(数値)
    指定した数値より小さい最大の整数を返す
        例：
            SELECT floor(23.525);
                出てくる答えは23
ceil(数値)
    指定した数値より大きい最小の値を返す
        例：
            SELECT ceil(23.525);
                出てくる答えは24
round(数値)
    指定した数値の小数点部分を四捨五入した値を返す
trunc(数値[,小数点を切り捨てる位])
    指定した数値の小数点部分を、指定した値で切り捨てた値を返す
    小数点を切り捨てる位を省略した場合は、小数点部分を全て切り捨てる
        例：
            SELECT trunc(23.525, 2);
                出てくる答えは23.52
random()
    0以上1未満の範囲でランダムな値を返す

'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'文字列関数
'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
lower(文字列)
    指定した文字列を小文字に変換して返す

upper(文字列)
    指定した文字列を大文字に変換して返す

char_length(文字列)
    指定した文字列の文字数を返す
        例：
            SELECT char_length('テスト');
                答えは3

octet_length(文字列)
    指定した文字列のバイト数を返す

trim(元文字列[, 除去する文字列])
    指定した元文字列から除去する文字列を取り除いて返す
    除去する文字列を省略した場合は、デフォルトで空白文字が設定される
    
lpad(元文字列,文字数[, 追加する文字列])
    指定した元文字列の"先頭"に、文字数に達するまで追加する文字列が埋め込まれる
    追加する文字列を省略した場合には、デフォルトで空白文字が設定される

rpad(元文字列,文字数[, 追加する文字列])
    指定した元文字列の"末尾"に、文字数に達するまで追加する文字列が埋め込まれる
    追加する文字列を省略した場合には、デフォルトで空白文字が設定される

substring(文字列, 開始位置[, 文字数])
    指定した文字列の開始位置から、文字数分の文字列を取得して返す
    文字数を省略した場合は、デフォルトで末尾までに設定される

replace(文字列, 置換前の文字列, 置換後の文字列)
    指定した文字列中の置換前の文字列を、置換後の文字列に置き換えて返す

'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'POSIX正規表現
'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
対象の文字列に対して前方一致や後方一致
    →あるパターンに一致するかどうかの検索を行う。

    【一致するパターン】
    ・大文字と小文字を区別あり(パターンが一致するかどうか)
        判定対象のカラム名　~　'パターン'

    例①：
    DELETE FROM sample WHERE name ~ 'sa';
        大文字と小文字を区別し、「sample」テーブルの「name」カラムの値に「sa」
        が含まれているデータに対して削除処理を行っている。
            ∴sampleテーブルのnameカラムに'sa'が含まれているデータを抽出する(小文字のみ)

    【一致するパターン】
    ・大文字と小文字を区別なし(パターンが一致するかどうか)
        判定対象のカラム名　~*　'パターン'

    【一致しないパターン】
    ・大文字と小文字を区別なし(パターンが一致するかどうか)
        判定対象のカラム名　!~　'パターン'

    【一致しないパターン】
    ・大文字と小文字を区別なし(パターンが一致しないかどうか)
        判定対象のカラム名  !~* 'パターン'
        !~* 除外する

    例①：
    UPDATE sample SET tel = NULL WHERE name !~* 'TO';
        sampleテーブルのnameカラムがTANAKAのデータに対して、
        telカラムにNULLを追加する('TO' or 'to'でないやつ)

'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'SIMILAR TO 'パターン'
'LIKE 'パターン'
'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
対象の文字列に対して前方一致や後方一致など、
あるパターンに一致するかどうかの検索を行う。

判定対象のカラム名 SIMILAR TO 'パターン'　 ：一部のときは'%A001%'
判定対象のカラム名 LIKE 'パターン'              ：一部のときは'%A001%'
判定対象のカラム名 ~ 'パターン'                  ：もともと「一部」を検索する

メタ文字
    通常の文字とは別の特別な意味を持つ文字の「％」は任意の文字を表す。

例①：
    SELECT * FROM sample WHERE name SIMILAR TO '%Abc';
    sampleテーブルのnameカラムから'Abc'で終わるレコードを抜きだす
'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'文字列連結演算子は、||である
'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
例①：
    SELECT * FROM sample WHERE name = 'SATO' || ' ' || 'HITOMI';
        sampleテーブルのnameカラムが'SATO HITOMI'のカラムを抽出する

'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'現在の日付・時刻を取得する関数
'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
now()   戻り値はTIMESTAMP型
current_timestamp   戻り値はTIMESTAMP型
    現在のトランザクションの開始日時を返す(now()も)
statement_timestamp()   戻り値はTIMESTAMP型
    現在の文の開始日時を返す
clock_timestamp()   戻り値はTIMESTAMP型
    実際の日時を返す
current_date    戻り値はDATE型
    現在のトランザクションの開始日を返す
current_time    戻り値はTIME型
    現在のトランザクションの開始時刻を返す(現在時刻)

'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'日付関数(インターバル値から指定したフィールドを返す)
    extract
    date_part
'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
    書式(extract):
        extract(フィールド from interval 'インターバル値')

    書式(date_part)
        date_part('フィールド' , interval 'インターバル値')

'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'日付の差分：age()関数
'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
書式
    age(タイムスタンプ値, タイムスタンプ値)→タイムスタンプ値だけ

    ※タイムスタンプ値はnow()やcurrent_timestampで表す
    ※もう一つは「timestamp '日付または日時'」
    ※もう一つは「'日付または日時'::timestamp」

    例①：
        SELECT age(timestamp '20170707' , timestamp '20150327');


'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'データ型書式設定関数
'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
to_char(値,'パターン')
    タイムスタンプ型やインターバル型、int型などの値を文字列型に変換する
    パターンには変換後の文字列の書式を指定する

to_date(文字列, 'パターン')
    文字列の値を日付型に変換する
    パターンには引数に指定した文字列の書式を指定する

to_timestamp(文字列, 'パターン')
    文字列型の値をtimestamp型に変換する
    パターンには引数に指定した文字列の書式を指定する

to_number(文字列, 'パターン')
    文字列型の値を数値型に変換する
    パターンには引数に指定した文字列の書式を指定する

'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'集約関数
'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
1.sum()
    指定したカラムの合計値を返す
    数値型のカラムのみ指定可能
    値がNULLのデータは無視される

2.avg()
    指定したカラムの平均値を返す
    数値型のカラムのみ指定可能
    値がNULLのデータは無視される

3.min()
    指定したカラムの最小値を返す
    数値型・日付・時刻型・文字列型のカラムを指定可能

4.max()
    指定したカラムの最大値を返す
    数値型・日付・時刻型・文字列型のカラムを指定可能

5.count()
    指定したカラムの値がNULL以外のデータ件数を返す
    「＊」を指定した場合は検索条件に合致した全データの件数を返す