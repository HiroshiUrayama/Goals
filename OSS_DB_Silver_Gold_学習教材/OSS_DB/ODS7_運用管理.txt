'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'ロール(データベースロール)
'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
ロール=複数のユーザを一つに纏めたグループのことを言う。
    単体のデータベースユーザもロールとして扱われる。
    多くの場合、ユーザとロールは同じ意味で使用される。
        分けて使用する場合：複数のユーザで構成されるグループ／ロール
                                　　1人のユーザ／ユーザ

単体のユーザ
単体のグループ
単体のユーザ&グループ両方

・データベースのオブジェクトを所有する
・データベースに対して権限を持つことのできる実体

※一つのデータベースクラスタ内で、同一名のユーザを複数作成することはできない。   
※ロールには属性としてパスワードヂャ権限を設定することができる。
※ロールはデータベースクラスタ単位で作成される。データベースの指定は不可。

    'ーーーーーーーーーーーーーーーーーーーーーーーーーーー
    【作る】
    'CREATE ROLE ロール名 [WITH] [属性];
    'CREATE USER ロール名 [WITH] [属性];
    'ALTER ROLE ロール名 [WITH] [属性];
        権限は、CREATEしたあとにALTERで変更可能。
        ALTER ROLE RENAME TO 
        ALTER USER RENAME TO 
    'ALTER USER ロール名 [WITH] [属性];
    'DROP ROLE(削除)
    'DROP USER(削除)
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーー
    例①：
        CREATE ROLE test WITH CREATEROLE;
            testロールをロールを作成する権限ありで作成する。

    例②：
        CREATE USER test;
        CREATE ROLE test WITH LOGIN;
        データベースへ接続する権限ありでtestロールを作成する

    例③：
        CREATE ROLE test WITH PASSWORD 'pass001';
        ALTER USER test WITH PASSWORD 'pass001';
        ALTER ROLE test PASSWORD 'pass001';
            testロールにパスワードを設定する

    【属性】
    [NO]LOGIN
        データベースへ接続できるログイン権限の有無を設定する
        CREATE ROLE構文：デフォルト値はNOLOGIN(ログイン権限なし)
        CREATE USER構文：デフォルト値はLOGIN(ログイン権限あり)

    [NO]SUPERUSER
        スーパユーザ権限の有無を設定する
        デフォルト値はNOSUPERUSER(スーパユーザ権限なし)

    [NO]CREATEDB
        データベースを作成する権限の有無を設定
        デフォルト値はNOCREATEDB(データベース作成権限なし)

    [NO]CREATEROLE
        ロール(ユーザ)を作成する権限の有無を設定する
        デフォルト値はNOCREATEROLE(ロール作成の権限なし)

    PASSWORD 'パスワード'
        データベース接続時に使用するパスワードを設定する

    IN ROLE ロール名
        メンバとして追加する既存のロール名を設定する

    'ーーーーーーーーーーーーーーーーーーーーーーーーーーー
    【変更する】
    'ALTER ROLE 現在のロール名 RENAME TO 新しいロール名;
    'ALTER USER 現在のロール名 RENAME TO 新しいロール名;
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーー
    例：
    'ALTER ROLE test RENAME TO test001;
        testロールのロール名をtest001に変更する

    'ーーーーーーーーーーーーーーーーーーーーーーーーーーー
    'ANALYZE [テーブル名];
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーー
    統計情報を収集して更新するコマンド。
        統計情報=SQLの実行を効率的に行うために使用するデータ
    
    ANALYZEを適切に実行しないと統計情報が実際のデータと異なってしまい、
    SQLの実行計画を適切に作成できなくなる。
        ∴効率の良い実行計画が作成されなくなる。

    例：
        ANALYZE sample;
            sampleテーブルに対する統計情報を取得する    

    ※ANALYZEを実行するとロックは取得される。
        ただし、そのロックは他ユーザのテーブルに対する処理を妨げない。
    ※ANALYZEで実行される処理は、ファイルサイズに影響しない。

    'ーーーーーーーーーーーーーーーーーーーーーーーーーーー
    'VACUUM [オプション][テーブル名[,テーブル名]];
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーー
    OS上の専有領域はそのまま保持した状態で、
    テーブルのインデックスを含む不要領域を回収するコマンド。
        不要領域の回収
            不要な領域を判別できるようにマークして、その領域を再利用できるようにすること。
            
    例①：
        postgres=# VACUUM sample;
        sampleテーブルの不要領域を回収する
        postgres=#は、postgresデータベースに接続していることを表している。

    【オプション】
        FULL
            不要領域の回収を行い、回収した不要領域をos上から削除
                コマンド実行中はテーブルに排他ロックをかける
                    排他ロック：対象データに対して他ユーザのアクセスを禁止する制御

        ANALYZE
            不要領域の回収を行い、統計情報の収集・更新を行う

    VACUUMコマンドを適切に実行しないとデータファイルが肥大化してメモリ不足になる。

    'ーーーーーーーーーーーーーーーーーーーーーーーーーーー
    'VACUUM ANALYZE
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーー
    VACUUMコマンドにANALYZEオプションを設定したコマンド。
        テーブルの不要領域(更新によって使用されなくなったデータ)を回収する
        統計情報(SQLの実行を効率的に行うために使用するデータ)を収集・更新する
            テーブル名を指定しない場合は全テーブルを対象にする。
        
        ※実行しても他ユーザのテーブルに対する処理を妨げない。

    'ーーーーーーーーーーーーーーーーーーーーーーーーーーー
    'vacuumdb [接続オプション] [オプション] [-t テーブル名] [データベース名]
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーー
    【主なオプション】
    --all | -a
        全てのデータベースを不要領域の回収対象とする
    
    --full | -f
        不要領域の回収を行い、回収した不要領域をOS上から削除する
        コマンド実行中はテーブルに排他ロックをかける
            →対象データに対して他ユーザのアクセスを禁止する制御

    --analyze | -z
        不要領域の回収を行い、統計情報の収集・更新を行う

    --analyze-only | -Z
        不要領域の回収はせずに、統計情報の収集・更新のみを行う

    オプションを指定しない
        不要領域の回収のみを行う。削除はしない。

    -fオプションを指定したときだけ排他ロックをかける。

    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    '各種コマンド(vacuumdb)
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    例①：vacuumdb -f -t sample examdb
        examdbデータベースのsampleテーブルのみの不要領域をOS上から削除
        テーブルサイズを小さくするコマンド
    
    例②：vacuumdb -a
        全てのデータベースの不要領域を回収するコマンド。
        回収した不要領域の削除は行わない。

    例③：vacuumdb -Z -t sample examdb
        examdbデータベースのsampleテーブルに対して実行
        不要領域は回収せずに統計情報(SQLの実行を効率的に行うために使用するデータ)
        を収集・更新するコマンド。

    例④：vacuumdb -az
        全てのデータベースの不要領域を回収し、統計情報を収集・更新する

    例⑤：vacuumdb -af
        全てのデータベースの不要領域を回収し、OS上から削除するコマンド
    
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーー
    'autovacuum(自動バキューム)
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーー
    テーブルに対して大量のデータ更新があると実行される
    処理は複数のプロセスによって実行される

    自動的に、、、
        不要領域(更新によって使用されなくなったデータ)の回収
        統計情報(SQLの実行を効率的に行うために使用するデータ)の収集・更新を行う機能。
            ※削除はしない
    
    デフォルトはon(OFFも設定できる)
        VACUUM ANALYZEと同じ処理が行われる。
        大量のデータ更新があったテーブルに対し、複数のプロセスによって実行される。

    autovacuum on off
        PostgreSQLの起動・再起動
        postgresql.confの再読み込み
            で設定変更可能(反映される)

    ※統計情報の収集を無効にすると、autovacuumは使用できない。
    ※PostgreSQLを停止しなくても実行可能。
    ※PostgreSQLの効率の良い運用を行うために推奨されている。
    ※PostgreSQL Ver8.3から利用可能。
    ※VACUUM ANALYZEコマンドの実行と同じ処理を行う
    ※autovacuumが有効になっていてもVACUUMを手動で実行できる
    ※autovacuum実行中でも、他ユーザは対象テーブルのデータを更新できる
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーー
    'VACUUM FULLコマンド
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーー
    テーブルのインデックスを含む不要領域を改修し、改修した領域を削除する。

    'ーーーーーーーーーーーーーーーーーーーーーーーーーーー
    'CLUSTER
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーー
    インデックスを使用して、テーブルのデータを物理的に並べ替えるコマンド。

    'ーーーーーーーーーーーーーーーーーーーーーーーーーーー
    'REINDEX
    'ーーーーーーーーーーーーーーーーーーーーーーーーーーー
    インデックスを作り直し、インデックス内に生じた空領域を解消するコマンド。

'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'データベースユーザの特徴
'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
・複数のユーザをロールとしてグループにし、1人のユーザと同じように使うことができる
・データベースクラスタ毎に作成され、各データベースクラスタ内の全データベースで共有できる

PostgreSQLのユーザアカウントはデータベースクラスタ毎に作成する。
データベース毎に作成されるテーブル等と異なり、各データベースクラスタ内の全データベースで共有可能。

'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'情報スキーマ(標準SQL準拠)
'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
データベースクラスタに関する情報の確認に使用する仕組みのこと。
データベースオブジェクトに関する定義情報を含むスキーマを指す。
    テーブルなどのオブジェクトを格納している名前空間
スーパユーザに所有される。
    ビューとテーブルのグループ。
標準SQLに当てはまるので移植性が高い。
    だけど、全てのデータベースに移植できるわけではない。
主なビューにはtablesビューがある。
    全てのテーブルとビューの一覧を格納している。

    ※パラメータ値を設定する必要はない。
    ※取得される情報は、システムカタログより簡易的なものである。
    ※情報スキーマのスキーマ名はinformation_schemaである。
    ※参照に特別な権限は必要ない。
    ※データベース管理情報は、システムカタログである。

◇標準SQL規格でテーブル情報を取得したいと言われたらこっち

'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'権限系統(GRANT,REVOKE)
'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
GRANT：権限を付与するコマンド
    書式
        GRANT 権限 ON テーブル名 TO{ユーザ名 | PUBLIC}
            対象をPUBLICにすると、INSERT権限を全てのユーザに付与することができる。

    例①：
        GRANT INSERT ON sample TO PUBLIC;
            全てのユーザがsampleテーブルにデータを挿入できるようにする
            INSERT権限はINSERTとCOPY FROMの実行を許可するもの。

REVOKE：権限を取り消すコマンド
    書式
        REVOKE 権限 ON テーブル名 FROM {ユーザ名 | PUBLIC};

    例①：
        REVOKE DELETE ON sample FROM "test";
            testロールに対して、sampleテーブルの行を削除する権限を取り消す


↑両方で設定できる権限
    1.SELECTとCOPY TOの実行を許可する(SELECT)
    2.INSERTとCOPY FROMの実行を許可する(INSERT)
    3.UPDATEの実行を許可する(UPDATE)
    4.DELETEの実行を許可する(DELETE)
    5.TRUNCATEの実行(テーブルの全データを高速で削除)を許可する(TRUNCATE)
    6.外部キー制約を作成することを許可する(REFERENCES)
    7.トリガーの作成を許可する(TRIGGER)
    8.データベースへの接続を許可する(CONNECT)
    9.データベースに対するスキーマの作成を許可する(CREATE)
    10.スキーマに対するオブジェクトの作成を許可する(CREATE)

    ※スキーマ削除(DROP SCHEMA)
    ※インデックス削除(DROP INDEX)
    ※ユーザの作成(CREATE ROLE/CREATE USER)
    ※REINDEX
    ※REVOKE
    ※DROP
    ※VACUUM
    ※ALTER
    ※ANALYZE
        直接、GRANT・REVOKEでは設定できない権限。

'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'システムカタログ(標準SQL規格ではない)
'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
データベースクラスタに関する情報の確認に使用する仕組み。
データベースの内部情報を格納したPostgreSQL固有のテーブルを指す。

例①：システムカタログからテーブルに関する情報を取得する
    SELECT * FROM pg_tables;
    SELECT * FROM pg_catalog.pg_tables

システムカタログはpg_catalogスキーマに属するため、
pg_catalog.pg_tablesと記載する(スキーマ名省略OK)。

【PostgreSQLの主なシステムカタログ】
pg_tables
    スキーマ名・テーブル名・所有者・インデックスの有無
    データベース内のテーブルに関する情報を格納している

pg_database(データベースクラスタ毎に存在する)
    データベース名・所有者・エンコーディング
    データベースクラスタ全体のデータベースに関する情報を格納している

pg_user
    ユーザ名・ユーザID・ユーザの権限
    データベースクラスタ全体のユーザに関する情報を格納している

pg_authid
    ロール名・ロールの権限・暗号化されたパスワード
    データベースクラスタ全体のロールに関する情報を格納している

pg_indexes
    インデックスを有するスキーマ名・インデックスを有するテーブル名・インデックス名
    データベース内のインデックスに関する情報を格納している

'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'システム情報関数
'＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
システムの情報を確認するために使用する関数のこと。

version()
    現在稼働中のPostgreSQLのバージョンを取得する
current_database()
    現在接続しているデータベース情報を取得する(存在するデータベース一覧ではない)
current_user
    コマンドを実行したユーザ情報を取得する
current_timestamp
    現在の日時を取得する(現在時刻ではない)
current_date
    現在の日付を取得する
