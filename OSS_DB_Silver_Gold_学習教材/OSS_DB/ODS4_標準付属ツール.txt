ここはpsqlを本当にDWしてからやらないといけないな…
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'標準付属ツールの使い方
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'psql(PostgreSQLに付属する対話型インタフェース)
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
SQLコマンドの終了はセミコロン;で判断する。
    一般ユーザの場合：データベース名=>で表示
    スーパユーザの場合：データベース名=#で表示
        文の途中の場合は、"-"になる。
        最初と最後は"="になる。

メタコマンド(OSコマンドを実行できる)
    psqlで独自に使用できるコマンドのこと。
        \で始まリ、改行で終了する。
        \qでpsqlを終了する。

< ファイル名という記載でファイルの読み込みを行うことができる。

使える人
    ・データベースのスーパユーザ
    ・一般ユーザ

接続先ホストは、IPアドレスやホスト名で指定することができる。

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'psqlコマンド psql [接続オプション] [オプション] [データベース名[ユーザ名]]
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
スーパユーザ権限がなくても実行可能。

接続時にデータベースやユーザを指定することができる。
    -cオプションを使用する。
        psql -U postgres test -c 'SELECT * FROM sample'
        psqlにpostgresユーザでtestDBに入り、SELECT以下のコマンドを実行する

    SQLを記載したファイルを指定して実行できる。
        データベースにログインしたあとに、SQLを実行
        データベースにログインしたあとに、SQLが書いてあるファイルを実行する
        リダイレクトを使用して、SQLを記載したファイルを指定する
        -fオプションを指定して、SQLを記載したファイルを指定する
            --single-transactionオプションを設定した場合
                複数のSQLを一つのトランザクションで実行する。
                    全てのSQLが正常に実行できた場合はコミットされる
                    対象のSQLにエラーが発生した場合は全ての処理が取り消される。
            --single-stepオプション
                各SQLごとに実行するかキャンセルするかの確認が行われる。

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'psqlコマンド psql [接続オプション] [オプション] [データベース名[ユーザ名]]
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
<接続オプション一覧>

オプションが無い→環境変数が使用される。
環境変数の設定がない→デフォルトの設定になる

-U ユーザ名：接続時のデータベースユーザ名を指定：PGUSER：OSユーザ名
-h ホスト名またはIPアドレス：
    接続先のホスト名またはIPアドレスを指定
    TCP/IPやUNIXドメインによる接続が可能    ：PGHOST：  UNIXドメインによる接続
-d データベース名
    接続先のデータベース名を指定：PGDATABASE：接続時のデータベースユーザ名
-p ポート名
    接続先のポート番号を指定：PGPORT：5432

<psqlの主なオプション>
-l --list   全てのデータベースのリストを表示したあと、psqlを終了する
-c コマンド名(--command=コマンド名) 指定したコマンドの実行結果を表示したあと、psqlを終了する
-f ファイル名(--file=ファイル名)指定したファイルをソースとして読み込み、実行結果を表示したあと、psqlを終了する
-s (single-step)各コマンドごとに実行するかキャンセルするかの確認を行う(シングルステップモード)
-1 (--single-transaction)複数のコマンドを1つのトランザクションで実行する-cオプションや-fオプションと組み合わせた場合のみ使用できる

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'psqlメタコマンド一覧
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
\l  データベースの一覧を確認
\d  テーブル、ビュー、シーケンスの一覧
\dt テーブルの一覧
\du ユーザの一覧(単なる…)→データベース一覧は表示されない
    接続中、否に関わらず、全ユーザの一覧が表示される
\z(\dp) テーブル、ビュー、シーケンスの一覧(アクセス制限付き)
    こっちはアクセス権限付き(ユーザも表示できるそうな)
\?  メタコマンドの一覧
\h [SQLコマンド] SQLコマンドのヘルプ一覧
\! [OSコマンド] OSコマンドの実行結果
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'pg_ctlコマンド
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
何なのか？
    PostgreSQLサーバの起動・シャットダウン
    データベースクラスタの初期化
    起動中の状態を表示するための管理ツール
    PostgreSQLが稼働するホスト上で実行できる

実行できる人
    PostgreSQLの管理ユーザのみ実行可能。

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'pg_ctlコマンドのサブコマンド
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
initdb(init)：    新規データベースクラスタを作成する
start：    バックグラウンドでPostgreSQLサーバを起動する
stop：    シャットダウン(停止)する
restart：    再起動する(stopを実行したあと、startを実行する)
reload：    設定ファイルを再読込する
status：    PostgreSQLサーバが稼働しているか確かめる
kill：    プロセスにシグナルを送信する

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
pg_ctl restart(データベースクラスタを再起動する)
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
-D データベースクラスタ名   --pgdata=データベースクラスタ名
    対象となるデータベースクラスタを指定する
    指定がない場合は、環境変数「$PGDATA」になる

-m シャットダウンモード
    3つの異なるシャットダウン方式を指定する

-W 
    起動の完了を待たずにコマンド発行元に制御を戻す
    デフォルトでは完了まで最大60秒待ち、起動完了のメッセージを表示する

-t 最大待ち時間
    起動時の処理・シャットダウンが完了するまでの待ち時間を指定する
    指定がない場合は60秒になる

最大待ち時間に停止が完了しない場合は失敗として処理される。
    PostgreSQLの停止は引き続き行われる。

restartは、実質的にはstopを実行→startを実行することと同じ。
    ※pg_ctl reload：設定ファイルを再読込する
    ※pg_ctl restart：再起動する

実行例：pg_ctl restart(デフォルト)
    サーバ停止処理の完了を待っています…完了
    サーバは停止しました
    サーバの起動完了を待っています…完了
    サーバ起動完了

実行例：-Wオプションあり
    サーバ停止処理の完了を待っています…完了
    サーバは停止しました
    サーバは起動中です。※起動完了を待っていない

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'pg_ctl reload [オプション]
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
    クライアント認証に関する設定をするためのファイル
    postgresql.conf
    pg_hba.conf
        ※設定が変更されないパラメータもある

-D データベースクラスタ名(--pgdata=データベースクラスタ名)
    対象となるデータベースクラスタを指定する
        指定がない場合は、環境変数「$PGDATA」になる
            ∴指定していなくても実行は可能
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'pg_ctl stop [オプション]
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
できる人：
    PostgreSQLの管理ユーザのみ

稼働中のPostgreSQLサーバをシャットダウン(停止)する。
    コマンド実行直後から、新しいクライアントからの接続を禁止する。

-D  データベースクラスタ名
    --pgdata=データベースクラスタ名
        対象となるデータベースクラスタを指定する
            指定がない場合は、環境変数「$PGDATA」になる

-W  シャットダウンの完了を待たずにコマンド発行元に制御を戻す
    デフォルトでは完了まで最大60秒待ち、停止完了のメッセージを表示する

-t  最大待ち時間
    シャットダウンが完了するまでの待ち時間を指定する
        指定がない場合は60秒になる

-m シャットダウンモードを指定。
    <fまたはfast>
        高速シャットダウンモード
            実行中の処理を中断し、全てのクライアント接続を強制的に切断してからシャットダウン。
            実行中のトランザクションはロールバックされ、実行する前の状態に戻る

    <iまたはimmediate>
        即時シャットダウンモード
            実行中の処理を強制終了
            クライアント接続を全て強制的に切断してからシャットダウン
            次回起動時に回復処理を実行

    <sまたはsmart>
        スマートシャットダウンモード
            全てのクライアント接続が切断されてからシャットダウンする
            実行中の処理はシャットダウンの前に正常に完了される

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'pg_ctl kill [シグナル名][プロセスID]
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
PostgreSQLサーバのプロセスに直接シグナルを送信することで、
プロセスの停止や設定ファイルの再読み込みを行う。

停止時はコマンド実行直後から、新しいクライアントからの接続は禁止される。

<主なシグナル>
・TERM(pg_ctl stop -m smartと同じ処理)＝スマート
    全てのクライアント接続が切断されるまで待ってからシャットダウンする

・INT(pg_ctl stop -m fastと同じ処理)＝ファスト
    高速シャットダウンし、実行中のトランザクション処理が開始した時の状態に戻す(ロールバックする)

・QUIT(pg_ctl stop -m immediateと同じ処理)＝即時
    実行中のトランザクションを実行前の状態に戻すロールバックなどの終了処理を行わずに、
    サーバプロセス自体を停止する。サーバのプロセスがクラッシュして停止したのと同じなので、
    次回起動時に回復処理を実行するためにサーバに負荷がかかる。

・HUP(pg_ctl reloadと同じ処理)=リロード
    設定ファイルを再読込する。

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'createdbコマンド(新しいdbの作成)
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
実行できる人：
    1.スーパユーザ
    2.CREATEDB権限(データベースを作成する権限)を持った人

実行したユーザが、新しいデータベースの所有者になる。

実行するユーザがスーパユーザであれば、
    -Oオプションを使用して、別ユーザを所有者に指定できる。

-E エンコーディング(--encodig=エンコーディング)：   データベース内で使用するエンコーディングを指定する
-O ユーザ名(--owner=ユーザ名)：    新しいデータベースの所有者となるユーザを指定する
-l ロケール名(--locale=ロケール名)：    データベースで使用されるロケールを指定する
    ※★ロケールの設定は必ず小文字！！！
-T テンプレート名(--temlate=テンプレート名)
    テンプレートデータベース(template0またはtemplate1)を指定する
    新しいDBを作成する際に、-Tオプションでひな形DBを指定できる。
        何も指定しないとtemplate1になる。
            エンコーディング、ロケールはテンプレートの設定を引き継ぐ
            ロケールをテンプレートとは別の設定にしたい場合
                template0を指定(template0以外で使ってもcreatedbコマンドは失敗する)
                -lまたは--localeオプションで変更する

※接続先のホスト名またはIPアドレスは、設定するのではなく指定するのが正しい表現。
    使用する接続オプションは-h。

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'createuserコマンド
’createuser [接続オプション] [オプション] [ユーザ名]
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
<接続オプション>
-U 接続するユーザ名。

例：createuser goo
接続オプションやオプションを設定しない場合は、何も引き継がない
OSのコマンドプロンプトで実行すると、OSのユーザ名で処理される(エラーにはならない)

例：psql -U postgres -s test
postgresユーザで、スーパーユーザ権限のあるtestをユーザとして作成する

例：createuser -U postgres --login --createdb sample
postgresユーザでデータベースに登録
ログイン権限とデータベース作成権限をもつ：sampleユーザを作成する

↑CREATEROLE権限またはスーパユーザ権限を持つユーザで接続する必要がある

<これがオプション？>
-P(--pwprompt)：    パスワードを設定する
-s(superuser)：    新しいユーザをスーパユーザとして作成する
-d(--createdb)：    データベースの作成を許可する
-r(createrole)：    新しいユーザの作成を許可する
-l(login)：    ログインを許可する(デフォルト)
-S(--no-superuser)：    新しいユーザをスーパユーザにしない(デフォルト)
-D(--no-createdb)：    データベースの作成を禁止する(デフォルト)
-R(no-createrole)：    新しいユーザの作成を禁止する(デフォルト)
-L(--no-login)：    ログインを禁止する

権限設定はできない。
データベースや、テーブルを作ることはできない。
設定を変更することも不可能(ALTER ROLEコマンド)
有効期限を設定するオプションはない。
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'dropdbコマンド dropdb [接続オプション] [オプション] [データベース名]
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
PostgreSQLに作成してあるデータベースを削除する。
SQLコマンド「DROP DATABASE」と同じ

削除できる人
    1.スーパユーザ
        削除対象のユーザがスーパユーザ権限がない場合は、
        削除する側のユーザがスーパーユーザである必要はない。
    2.dbの所有者

’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
'dropuserコマンド(PostgreSQLのユーザアカウントを削除する)
'dropuser [接続オプション] [オプション] [ユーザ名]
’＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
SQLのDROP ROLE/DROP USERと一緒

消せる人
    ・スーパユーザ
    ・CREATEROLE権限を持っている人(ユーザを作成する権限を持っている人)
    ※データベースやテーブルなどのデータベースオブジェクトを所有しているユーザは削除できない。

※PostgreSQLにはロールという概念がある
    複数のユーザを一つに纏めたグループのこと
    単体のデータベースユーザもロールとして扱われる。

    -iまたは--interactive
        削除前に確認を促すメッセージが表示されるようになる
        削除するユーザを指定しない場合は、対話的に入力を促される

接続オプションで-Uを使用すると、使うユーザを指定することができる
    -Uオプションを使用しない場合は、コマンドを実行したOSユーザで行われる。

